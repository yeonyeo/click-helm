# Default values for card.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: limseo/click-card
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 8080
  NodePort: 31000

ingress:
  enabled: false
  className: ""
  annotations: { kubernetes.io/ingress.class: nginx }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
      paths:
        - path: /api/v1
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  initialDelaySeconds: 60
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: /actuator/health
    port: 8080
readinessProbe:
  initialDelaySeconds: 60
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: /actuator/health
    port: 8080

env:
  - name: "profiles"
    value: "prod"
  - name: "SPRING_DATASOURCE_URL"
    value: "jdbc:postgresql://click-card-postgre:5432/click_card?characterEncoding=UTF-8&serverTimezone=Asia/Seoul"
  - name: "user"
    value: "postgres"
  - name: "password"
    value: "1234"
  - name: "SPRING_JPA_HIBERNATE_DDL_AUTO"
    value: "update"
  - name: "secret"
    value: "thisispublickeythisispublickeythisispublickeythisispublickey"
  - name: "SPRING_CLOUD_GCP_STORAGE_CREDENTIALS_LOCATION"
    value: "classpath:springboot-storage-key.json"
  - name: "SPRING_CLOUD_GCP_STORAGE_PROJECT_ID"
    value: "vibrant-depth-424101-m7"
  - name: "SPRING_CLOUD_GCP_STORAGE_BUCKET"
    value: "cardimg_bucket"


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
